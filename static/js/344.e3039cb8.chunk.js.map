{"version":3,"file":"static/js/344.e3039cb8.chunk.js","mappings":"uMAqBaA,EAAoC,SAAC,GAG7B,IAFnBC,EAEkB,EAFlBA,gBACAC,EACkB,EADlBA,WAEMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZN,WAAY,IAEdO,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GAEZT,EAAgBS,MAIpB,OACE,0BACE,kBAAMD,SAAUN,EAAOU,aAAvB,WACE,0BACE,kBACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QAELC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOO,OAAOJ,WAGzB,kBACEQ,GAAG,WACHC,KAAK,WACLC,KAAK,WAELC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOO,OAAOH,YAEvB,0BACE,kBACEO,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,SAAUd,EAAOe,aACjBE,eAAgBjB,EAAOO,OAAOF,eAIjCN,IACC,4BACE,gBAAKmB,IAAI,UAAUC,IAAKpB,KACxB,0BACE,kBACEY,GAAG,aACHC,KAAK,aACLC,KAAK,OACLC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOO,OAAOR,mBAK7B,mBAAQc,KAAK,SAAb,yB,mBC3CFO,EAA6C,CACjDtB,gBAAiBuB,EAAAA,IAKnB,GAFcC,EAAAA,EAAAA,KAbU,SAACC,GAAD,eAAC,WACpBC,EAAAA,EAAAA,IAAaD,KACbE,EAAAA,EAAAA,IAAcF,MAWoBH,EAAzBE,EAjC2D,SAAC,GAIrD,IAHnBxB,EAGkB,EAHlBA,gBACA4B,EAEkB,EAFlBA,OACA3B,EACkB,EADlBA,WAEA,OAAI2B,GAAe,SAAC,KAAD,CAAUC,GAAG,cAE9B,4BACE,oCACA,wDACA,6CACA,SAAC9B,EAAD,CAAWC,gBAAiBA,EAAiBC,WAAYA,W,yMCdlD6B,GAAmBC,E,QAAAA,KAFL,SAACN,GAAD,OAAqCA,EAAMO,SAIpE,SAAAA,GAAK,OACH,KAISC,EAAoB,SAACR,GAAD,OAC/BA,EAAMS,YAAYC,SACPC,EAA0B,SAACX,GAAD,OACrCA,EAAMS,YAAYG,QACPC,EAAyB,SAACb,GAAD,OACpCA,EAAMc,KAAKC,KAAK3B,GAAG4B,YACRC,EAAoB,SAACjB,GAAD,OAAuCA,EAAMkB,aAEjEjB,EAAe,SAACD,GAAD,MAA6C,CACvEG,OAAQH,EAAMc,KAAKX,SAERD,EAAgB,SAACF,GAAD,MAAgD,CAC3ExB,WAAYwB,EAAMc,KAAKtC","sources":["components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","utils/selectors/selectors.tsx"],"sourcesContent":["import { FC, ReactElement } from 'react';\n\nimport { useFormik } from 'formik';\n\nimport { loginAPIRequestType } from 'api/api';\n\nexport type FormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captchaURL: string;\n};\n\nexport type LoginFormPropsType = {\n  setLoginHandler: (userData: loginAPIRequestType) => void;\n  captchaURL: string;\n};\n\n// <form onSubmit={props.handleSubmit}>  метод из redux form,\n// который собирает данные из Fields\n\nexport const LoginForm: FC<LoginFormPropsType> = ({\n  setLoginHandler,\n  captchaURL,\n}): ReactElement => {\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: true,\n      captchaURL: '',\n    },\n    onSubmit: values => {\n      console.log(values);\n      // console.log(captchaURL);\n      setLoginHandler(values);\n    },\n  });\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <div>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            // autoComplete={formik.values.email}\n            onChange={formik.handleChange}\n            value={formik.values.email}\n          />\n        </div>\n        <input\n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          // autoComplete={formik.values.password}\n          onChange={formik.handleChange}\n          value={formik.values.password}\n        />\n        <div>\n          <input\n            id=\"checkbox\"\n            name=\"checkbox\"\n            type=\"checkbox\"\n            onChange={formik.handleChange}\n            defaultChecked={formik.values.rememberMe}\n          />\n        </div>\n\n        {captchaURL && (\n          <div>\n            <img alt=\"captcha\" src={captchaURL} />\n            <div>\n              <input\n                id=\"captchaURL\"\n                name=\"captchaURL\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                value={formik.values.captchaURL}\n              />\n            </div>\n          </div>\n        )}\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n};\n\n// {/* {props.captchaURL && ( */}\n// {/*   <div> */}\n// {/*     <img alt=\"captcha\" src={props.captchaURL} /> */}\n// {/*     <div>Captcha:</div> */}\n// {/*     <div> */}\n// {/*       <Field type=\"input\" name=\"captcha\" component=\"input\" /> */}\n// {/*     </div> */}\n// {/*   </div> */}\n// {/* )} */}\n// {/* <input */}\n// {/*   id=\"captcha\" */}\n// {/*   name=\"captcha\" */}\n// {/*   type=\"text\" */}\n// {/*   onChange={formik.handleChange} */}\n// {/*   value={formik.values.captchaURL} */}\n// {/*   // value={formik.values.rememberMe} */}\n// {/* /> */}\n\n// props: FormDataType, LoginPropsType & LoginPropsType,\n\n// const maxLength = useCallback(maxLengthCreator(MaxLengthSymbols.loginForm), []);\n// <form onSubmit={props.handleSubmit}>\n//   <div>\n//     <Field\n//       type=\"text\"\n//       name=\"email\"\n//       placeholder=\"login\"\n//       component={Input}\n//       validate={[requiredField, maxLength]}\n//     />\n//   </div>\n//   <div>\n//     <Field\n//       type=\"password\"\n//       name=\"password\"\n//       placeholder=\"password\"\n//       component={Input}\n//       validate={[requiredField, maxLength]}\n//     />\n//   </div>\n//   <div>\n//     <Field type=\"checkbox\" name=\"remember me\" component=\"input\" /> remember me\n//   </div>\n//   <div className={style.errorMessage}>\n//     {props.error} {/* попадает сюда если сработал stopSubmit AC */}\n//   </div>\n//   <div>\n//     {props.captchaURL && (\n//       <div>\n//         <img alt=\"captcha\" src={props.captchaURL} />\n//         <div>Captcha:</div>\n//         <div>\n//           <Field type=\"input\" name=\"captcha\" component=\"input\" />\n//         </div>\n//       </div>\n//     )}\n// {/*     <button type=\"button\">Login</button> */}\n// {/*   </div> */}\n// {/* </form> */}\n","import { FC, ReactElement } from 'react';\n\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { LoginForm } from './LoginForm/LoginForm';\n\nimport { loginAPIRequestType } from 'api/api';\nimport { setLoginTC } from 'redux/auth_reducer';\nimport { AppStatePT } from 'redux/store_redux';\nimport { selectCaptcha, selectIsAuth } from 'utils/selectors/selectors';\n\nconst LoginContainer: FC<mapDispatchToPropsType & mapStateToPropsType> = ({\n  setLoginHandler,\n  isAuth,\n  captchaURL,\n}): ReactElement => {\n  if (isAuth) return <Navigate to=\"/profile\" />;\n  return (\n    <div>\n      <div>LOGIN</div>\n      <div>Email: free@samuraijs.com</div>\n      <div>Password: free</div>\n      <LoginForm setLoginHandler={setLoginHandler} captchaURL={captchaURL} />\n    </div>\n  );\n};\n// <LoginForm onSubmit={onSubmit}/> так это контейнерная компонента, то в onSubmit автоматом попадают пропсы\n\n// eslint-disable-next-line react/no-unused-prop-types\ntype mapStateToPropsType = { isAuth: boolean; captchaURL: string };\n\nconst mapStateToProps = (state: AppStatePT): mapStateToPropsType => ({\n  ...selectIsAuth(state),\n  ...selectCaptcha(state),\n});\n\ntype mapDispatchToPropsType = {\n  setLoginHandler: (userData: loginAPIRequestType) => void;\n};\n\nconst mapDispatchToProps: mapDispatchToPropsType = {\n  setLoginHandler: setLoginTC,\n};\n\nconst Login = connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\n\nexport default Login;\n","import { createSelector } from 'reselect';\n\nimport { dialogsItemsPT } from 'components/Messages/MessagesContainer';\nimport { UsersStatePT } from 'components/Users/UsersContainer';\nimport { ProfileType } from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\n\nexport const selectUsers = (state: AppStatePT): UsersStatePT => state.users; // примитивный селектор\n\nexport const selectUsersSuper = createSelector(\n  selectUsers,\n  users =>\n    // помимо selectUsers могут быть и другие селекторы и результат будет закинут как аргумент в фн.\n    users, // здесь может быть сложная фильтрация\n);\n\nexport const selectProfilePage = (state: AppStatePT): ProfileType =>\n  state.profilePage.profile;\nexport const selectProfilePageStatus = (state: AppStatePT): string =>\n  state.profilePage.status;\nexport const selectAuthorisedUserID = (state: AppStatePT): string =>\n  state.auth.data.id.toString();\nexport const selectDialogsPage = (state: AppStatePT): dialogsItemsPT => state.dialogsPage;\n// export const selectAuth = (state: AppStatePT): boolean => state.auth.isAuth;\nexport const selectIsAuth = (state: AppStatePT): { isAuth: boolean } => ({\n  isAuth: state.auth.isAuth,\n});\nexport const selectCaptcha = (state: AppStatePT): { captchaURL: string } => ({\n  captchaURL: state.auth.captchaURL,\n});\n"],"names":["LoginForm","setLoginHandler","captchaURL","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","console","log","handleSubmit","id","name","type","onChange","handleChange","value","defaultChecked","alt","src","mapDispatchToProps","setLoginTC","connect","state","selectIsAuth","selectCaptcha","isAuth","to","selectUsersSuper","createSelector","users","selectProfilePage","profilePage","profile","selectProfilePageStatus","status","selectAuthorisedUserID","auth","data","toString","selectDialogsPage","dialogsPage"],"sourceRoot":""}