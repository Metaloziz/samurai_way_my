{"version":3,"sources":["utils/validators/validators.ts","components/comonComponents/FormsControls/FormsControl.tsx","utils/selectors/selectors.tsx","components/comonComponents/FormsControls/FormsControl.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","components/Messages/DialogItem/DialogItem.module.css","components/Messages/MessagesItem/MessagesItem.module.css","components/Messages/Messages.module.css","components/Messages/DialogItem/DialogItem.tsx","components/Messages/MessagesItem/MessagesItem.tsx","components/Messages/AddMessageForm/AddMessageForm.tsx","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx"],"names":["requiredField","value","maxLengthCreator","max","length","console","dir","TextArea","memo","props","showError","meta","touched","error","className","style","formControl","placeholder","input","Input","type","selectUsersSuper","createSelector","state","users","selectProfilePage","profilePage","profile","selectProfilePageStatus","status","selectAuthorisedUserID","auth","data","id","toString","selectDialogsPage","dialogsPage","selectAuth","isAuth","selectIsAuth","module","exports","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps","withAuthRedirect","Component","connect","restProps","to","DialogItem","dialog","alt","src","ava","title","name","navLink","MessagesItem","s","message","text","MessageReduxInput","maxLength15","useCallback","onSubmit","handleSubmit","Field","component","validate","AddMessageForm","reduxForm","form","Messages","dialogsDataItems","dialogs","map","item","index","messagesDataItems","messages","addNewPost","log","addNewMessage","trim","warn","dialogItems","MessagesClassComponent","this","MessagesContainer","compose","dispatch","addTextMessageAC"],"mappings":"wGAAA,oEAAO,IAAMA,EAAgB,SAACC,GAC5B,IAAMA,EACN,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAiB,SAACF,GAChD,OAAIA,GAASA,EAAMG,OAASD,GAC1BE,QAAQC,IAAI,eACN,WAAN,OAAkBH,EAAlB,6BAEA,K,gJCDSI,EAAWC,gBAAK,SAACC,GAE5B,IAAMC,EAAYD,EAAME,KAAKC,SAAWH,EAAME,KAAKE,MAEnD,OACE,sBAAKC,UAAS,UAAKC,IAAMC,YAAX,YAA0BN,EAAYK,IAAMF,MAAQ,IAAlE,UACE,sCAAUI,YAAaR,EAAMQ,aAAiBR,EAAMS,QACnDR,GAAa,8BAAK,+BAAOD,EAAME,KAAKE,gBAK9BM,EAAQX,gBAAK,SAACC,GAEzB,IAAMC,EAAYD,EAAME,KAAKC,SAAWH,EAAME,KAAKE,MAEnD,OACE,sBAAKC,UAAS,UAAKC,IAAMC,YAAX,YAA0BN,EAAYK,IAAMF,MAAQ,IAAlE,UACE,+CAAOI,YAAaR,EAAMQ,aAAiBR,EAAMS,OAAjD,IAAwDE,KAAMX,EAAMW,QACnEV,GAAa,8BAAK,+BAAOD,EAAME,KAAKE,iB,iCC3B3C,2PAOaQ,EAAmBC,aAJL,SAACC,GAC1B,OAAOA,EAAMC,SAG6C,SAACA,GAE3D,OAAOA,KAGIC,EAAoB,SAACF,GAAD,OAAuBA,EAAMG,YAAYC,SAC7DC,EAA0B,SAACL,GAAD,OAAuBA,EAAMG,YAAYG,QACnEC,EAAyB,SAACP,GAAD,OAAuBA,EAAMQ,KAAKC,KAAKC,GAAGC,YACnEC,EAAoB,SAACZ,GAAD,OAAuBA,EAAMa,aACjDC,EAAa,SAACd,GAAD,OAAuBA,EAAMQ,KAAKO,QAC/CC,EAAe,SAAChB,GAAD,MAAwB,CAAEe,OAAQf,EAAMQ,KAAKO,U,oBCjBzEE,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,8ECA3D,SAASC,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAW5C,OAAQ0C,IACjCD,EAAMG,EAAWF,GACbF,EAASO,QAAQN,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOG,sBAAuB,CAChC,IAAIC,EAAmBJ,OAAOG,sBAAsBT,GAEpD,IAAKG,EAAI,EAAGA,EAAIO,EAAiBjD,OAAQ0C,IACvCD,EAAMQ,EAAiBP,GACnBF,EAASO,QAAQN,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,0BETLU,EAAkB,SAAClC,GACrB,MAAO,CACLe,OAAQf,EAAMQ,KAAKO,SAIhB,SAASoB,EAAoBC,GAalC,OAAOC,YAAQH,EAARG,EAXiB,SAACnD,GAAgC,IAEjD6B,EAAyB7B,EAAzB6B,OAAWuB,EAFqC,EAEvBpD,EAFuB,YAItD,OAAK6B,EAGE,cAACqB,EAAD,eAAgBE,IAFd,cAAC,IAAD,CAAUC,GAAI,gB,oBCpB3BtB,EAAOC,QAAU,CAAC,OAAS,2BAA2B,QAAU,8B,oBCAhED,EAAOC,QAAU,CAAC,QAAU,gC,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,0BAA0B,YAAc,8BAA8B,SAAW,6B,4HCSlGsB,EAAavD,gBAAK,SAACC,GAAD,OAE3B,sBAAKK,UAAWC,IAAMiD,OAAtB,UACE,qBAAKC,IAAK,MAAOC,IAAKzD,EAAM0D,IAAKC,MAAO3D,EAAM4D,KAAMpC,GAAIxB,EAAMwB,GAAGC,aACjE,eAAC,IAAD,CAASpB,UAAWC,IAAMuD,QACjBR,GAAI,aAAerD,EAAMwB,GADlC,cACwCxB,EAAM4D,KAD9C,a,kBCNOE,EAAe/D,gBAAK,SAACC,GAAD,OAC7B,qBAAKK,UAAW0D,IAAEC,QAAlB,SAA4BhE,EAAMiE,U,sDCC9BC,EAAoBnE,gBAAK,SAACC,GAE9B,IAAImE,EAAcC,sBAAY3E,YAAiB,IAAK,IAEpD,OACE,uBAAM4E,SAAUrE,EAAMsE,aAAtB,UACE,cAACC,EAAA,EAAD,CAAO5D,KAAM,OACNiD,KAAM,UACNY,UAAW1E,IACXU,YAAa,YACbiE,SAAU,CAAClF,IAAe4E,KAEjC,+CAKOO,EAAiBC,YAAiC,CAAEC,KAAM,WAAzCD,CAAsDT,GCjBzEW,EAAW9E,gBAAK,SAACC,GAG1B,IAAI8E,EAAmB9E,EAAM2B,YAAYoD,QACtCC,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAAC5B,EAAD,CAAwB9B,GAAIyD,EAAKzD,GAAIoC,KAAMqB,EAAKrB,KACpCF,IAAKuB,EAAKvB,KADLwB,MAGrCC,EAAoBnF,EAAM2B,YAAYyD,SACvCJ,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAACpB,EAAD,CAA0BtC,GAAIyD,EAAKzD,GAAIyC,KAAMgB,EAAKhB,MAA/BiB,MAEvCG,EAAajB,uBAAY,SAAC7C,GAC5B3B,QAAQ0F,IAAI/D,GACRA,EAAKyC,QACPhE,EAAMuF,cAAchE,EAAKyC,QAAQwB,QAEjC5F,QAAQ6F,KAAK,oBAEd,IAEH,OACE,sBAAKpF,UAAWC,IAAMyE,QAAtB,UACE,qBAAK1E,UAAWC,IAAMoF,YAAtB,SACGZ,IAEH,sBAAKzE,UAAWC,IAAM8E,SAAtB,UACE,8BAAMD,IACN,8BACE,cAACT,EAAD,CAAgBL,SAAUgB,e,kCCZ9BM,E,4JAEJ,WACE,OAAO,cAACd,EAAD,CAAUU,cAAeK,KAAK5F,MAAMuF,cAC1B5D,YAAaiE,KAAK5F,MAAM2B,kB,GAJRuB,aAwB/B2C,EAAoBC,YACxB3C,aAjBsB,SAACrC,GACvB,MAAO,CACLa,YAAaD,YAAkBZ,GAC/Be,OAAQD,YAAWd,OAII,SAACiF,GAC1B,MAAO,CACLR,cAAe,SAAC/F,GAAD,OAAmBuG,EAASC,YAAiBxG,SAS9DyD,IAFwB6C,CAGxBH,GAEaE","file":"static/js/5.5dd48df3.chunk.js","sourcesContent":["export const requiredField = (value: string) => {\r\n  if (!!value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (max: number) => (value: string) => {\r\n  if (value && value.length > max) {\r\n    console.dir('maxLength15');\r\n    return `Must be ${max} characters or less`;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n","import { WrappedFieldProps } from 'redux-form';\r\nimport style from './FormsControl.module.css';\r\nimport { memo } from 'react';\r\n\r\ninterface TextAreaType extends WrappedFieldProps {\r\n  placeholder: string;\r\n  type: string;\r\n} // другая запись для разнообразия\r\n\r\nexport const TextArea = memo((props: TextAreaType) => {\r\n\r\n  const showError = props.meta.touched && props.meta.error;\r\n\r\n  return (\r\n    <div className={`${style.formControl} ${showError ? style.error : ''}`}>\r\n      <textarea placeholder={props.placeholder} {...props.input} />\r\n      {showError && <div><span>{props.meta.error}</span></div>}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport const Input = memo((props: TextAreaType) => {\r\n\r\n  const showError = props.meta.touched && props.meta.error;\r\n\r\n  return (\r\n    <div className={`${style.formControl} ${showError ? style.error : ''}`}>\r\n      <input placeholder={props.placeholder} {...props.input} type={props.type} />\r\n      {showError && <div><span>{props.meta.error}</span></div>}\r\n    </div>\r\n  );\r\n});\r\n","import { AppStatePT } from 'redux/store_redux';\r\nimport { createSelector } from 'reselect';\r\nimport { UsersStatePT } from 'components/Users/UsersContainer';\r\n\r\nexport const selectUsers = (state: AppStatePT): UsersStatePT => {\r\n  return state.users; // примитивный селектор\r\n};\r\n\r\nexport const selectUsersSuper = createSelector(selectUsers, (users) => {\r\n  // помимо selectUsers могут быть и другие селекторы и результат будет закинут как аргумент в фн.\r\n  return users; // здесь может быть сложная фильтрация\r\n});\r\n\r\nexport const selectProfilePage = (state: AppStatePT) => state.profilePage.profile;\r\nexport const selectProfilePageStatus = (state: AppStatePT) => state.profilePage.status;\r\nexport const selectAuthorisedUserID = (state: AppStatePT) => state.auth.data.id.toString();\r\nexport const selectDialogsPage = (state: AppStatePT) => state.dialogsPage;\r\nexport const selectAuth = (state: AppStatePT) => state.auth.isAuth;\r\nexport const selectIsAuth = (state: AppStatePT) => ({ isAuth: state.auth.isAuth });","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__3Ad_n\",\"error\":\"FormsControl_error__33xeL\"};","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { connect } from 'react-redux';\r\nimport { AppStatePT } from 'redux/store_redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStatePT): mapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {  //  <T> не работает со стрелочными функциями\r\n\r\n  let RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n    let { isAuth, ...restProps } = props;   // Достаём isAuth, т.к. нам не нужно его передавать в компоненту\r\n\r\n    if (!isAuth) {\r\n      return <Navigate to={'/login'} />;\r\n    }\r\n    return <Component  {...restProps as T} />; // Все что мы закинем сюда, добавит новые ключи в конечной компоненте\r\n  };\r\n\r\n  // let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n  return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3F__n\",\"navLink\":\"DialogItem_navLink__1xHUn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessagesItem_message__OmE2G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Messages_dialogs__5WApR\",\"dialogItems\":\"Messages_dialogItems__13acq\",\"messages\":\"Messages_messages__1zCMR\"};","import style from './DialogItem.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport React, { memo } from 'react';\r\n\r\nexport type DialogPT = {\r\n  id: number\r\n  name: string\r\n  ava: string\r\n}\r\n\r\nexport let DialogItem = memo((props: DialogPT) =>\r\n\r\n  <div className={style.dialog}>\r\n    <img alt={'ava'} src={props.ava} title={props.name} id={props.id.toString()} />\r\n    <NavLink className={style.navLink}\r\n             to={'/messages/' + props.id}> {props.name} </NavLink>\r\n  </div>);","import s from './MessagesItem.module.css';\r\nimport React, { memo } from 'react';\r\n\r\nexport type MessagePT = {\r\n  id: number\r\n  text: string\r\n}\r\n\r\nexport let MessagesItem = memo((props: MessagePT) =>\r\n  <div className={s.message}>{props.text}</div>);","import { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport React, { memo, useCallback } from 'react';\r\nimport { maxLengthCreator, requiredField } from 'utils/validators/validators';\r\nimport { TextArea } from 'components/comonComponents/FormsControls/FormsControl';\r\n\r\nexport type  MessageReduxInputType = {\r\n  message: string   // этот ключ не используется для отбора данных,\r\n  // имя поля берётся из name={'message'} в <Filed />\r\n}\r\n\r\nconst MessageReduxInput = memo((props: InjectedFormProps<MessageReduxInputType>) => {\r\n\r\n  let maxLength15 = useCallback(maxLengthCreator(30), []);\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field type={'text'}\r\n             name={'message'}\r\n             component={TextArea}\r\n             placeholder={'some text'}\r\n             validate={[requiredField, maxLength15]}\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport const AddMessageForm = reduxForm<MessageReduxInputType>({ form: 'MESSAGE' })(MessageReduxInput);","import React, { memo, useCallback } from 'react';\r\nimport { DialogItem } from './DialogItem/DialogItem';\r\nimport { MessagesItem } from './MessagesItem/MessagesItem';\r\nimport style from './Messages.module.css';\r\nimport {\r\n  mapDispatchToPropsMessageType,\r\n  mapStateToPropsMessageType,\r\n} from './MessagesContainer';\r\nimport { AddMessageForm, MessageReduxInputType } from './AddMessageForm/AddMessageForm';\r\n\r\nexport let Messages = memo((props: Omit<mapStateToPropsMessageType, 'isAuth'>\r\n  & mapDispatchToPropsMessageType) => {\r\n\r\n  let dialogsDataItems = props.dialogsPage.dialogs\r\n    .map((item, index) => <DialogItem key={index} id={item.id} name={item.name}\r\n                                      ava={item.ava} />);\r\n\r\n  let messagesDataItems = props.dialogsPage.messages\r\n    .map((item, index) => <MessagesItem key={index} id={item.id} text={item.text} />);\r\n\r\n  let addNewPost = useCallback((data: MessageReduxInputType) => {\r\n    console.log(data);\r\n    if (data.message) {              // check empty\r\n      props.addNewMessage(data.message.trim());\r\n    } else {\r\n      console.warn('field is empty');\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <div className={style.dialogItems}>\r\n        {dialogsDataItems}\r\n      </div>\r\n      <div className={style.messages}>\r\n        <div>{messagesDataItems}</div>\r\n        <div>\r\n          <AddMessageForm onSubmit={addNewPost} />\r\n        </div>\r\n      </div>\r\n    </div>);\r\n});\r\n","import { addTextMessageAC } from 'redux/dialogs_reducer';\r\nimport { Messages } from './Messages';\r\nimport { connect } from 'react-redux';\r\nimport { AppStatePT } from 'redux/store_redux';\r\nimport { compose, Dispatch } from 'redux';\r\nimport { DialogPT } from './DialogItem/DialogItem';\r\nimport { MessagePT } from './MessagesItem/MessagesItem';\r\nimport { Component, ComponentType } from 'react';\r\nimport { withAuthRedirect } from 'hoc/withAuthRedirect';\r\nimport { selectAuth, selectDialogsPage } from 'utils/selectors/selectors';\r\n\r\nexport type mapStateToPropsMessageType = {\r\n  dialogsPage: dialogsItemsPT\r\n  isAuth: boolean\r\n};\r\nexport type mapDispatchToPropsMessageType = {\r\n  addNewMessage: (value: string) => void\r\n  // changeText: (newText: string) => void\r\n};\r\nexport type dialogsItemsPT = {\r\n  dialogs: Array<DialogPT>\r\n  messages: Array<MessagePT>\r\n  // newText: string\r\n}\r\n\r\nclass MessagesClassComponent extends Component<mapStateToPropsMessageType & mapDispatchToPropsMessageType> {\r\n\r\n  render() {\r\n    return <Messages addNewMessage={this.props.addNewMessage}\r\n                     dialogsPage={this.props.dialogsPage} />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStatePT): mapStateToPropsMessageType => {\r\n  return {\r\n    dialogsPage: selectDialogsPage(state),\r\n    isAuth: selectAuth(state), // add\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsMessageType => {\r\n  return {\r\n    addNewMessage: (value: string) => dispatch(addTextMessageAC(value)),\r\n    // changeText: (newText: string) => dispatch(updateTextMessageAC(newText))\r\n  };\r\n};\r\n\r\n// let connectComponent = withAuthRedirect(MessagesClassComponent) // withAuthRedirect проверяет на авторизацию\r\n\r\nconst MessagesContainer = compose<ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect,\r\n)(MessagesClassComponent);\r\n\r\nexport default MessagesContainer;\r\n"],"sourceRoot":""}