{"version":3,"file":"static/js/89.5c15b628.chunk.js","mappings":"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","sources":["webpack://samurai_way_my/./src/components/Profile/Content/Content_header/Content_header.module.css?0ee7","components/Profile/Content/Content_header/AvatarImage.tsx","components/Profile/Content/Content_header/ProfileDataInfo.tsx","webpack://samurai_way_my/./src/components/Profile/Content/Content_header/ProfileDataInfoForm.module.css?cdaf","components/Profile/Content/Content_header/ProfileDataInfoForm.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/Content/Content_header/ContentHeader.tsx","webpack://samurai_way_my/./src/components/Profile/Content/Posts/Old_post/Old_Post.module.css?697b","components/Profile/Content/Posts/Old_post/OldPost.tsx","webpack://samurai_way_my/./src/components/Profile/Content/Posts/Posts.module.css?5f9a","components/Profile/Content/Posts/PostsForm/PostsForm.tsx","components/Profile/Content/Posts/Posts.tsx","components/Profile/Content/Posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","utils/withRouter/WithRouter.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","utils/selectors/selectors.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Content_header_content__4OyhX\",\"item\":\"Content_header_item__b+iTz\",\"contacts\":\"Content_header_contacts__SNeU1\"};","import React, { FC, ReactElement } from 'react';\n\ntype AvatarImageType = {\n  userId: string;\n  onChangeHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const AvatarImage: FC<AvatarImageType> = ({\n  userId,\n  onChangeHandler,\n}): ReactElement => (\n  <div>{!userId && <input type=\"file\" onChange={onChangeHandler} />}</div>\n);\n","import { ReactElement } from 'react';\n\nimport style from 'components/Profile/Content/Content_header/Content_header.module.css';\nimport { ContactsType, ProfileType } from 'redux/profile_reducer';\n\ntype ProfileDataInfoType = {\n  profile: ProfileType;\n};\n\nexport const ProfileDataInfo = ({ profile }: ProfileDataInfoType): ReactElement => {\n  const arr = Object.keys(profile.contacts) as Array<keyof ContactsType>;\n\n  return (\n    <div>\n      <div>\n        <div>\n          <b>lookingForAJob:</b> {`${profile.lookingForAJob}`}\n        </div>\n        <div>\n          <b>lookingForAJobDescription:</b> {`${profile.lookingForAJobDescription}`}\n        </div>\n        <div>\n          <b>fullName:</b> {profile.fullName}\n        </div>\n        <div>\n          <b>about me:</b> {profile.aboutMe}\n        </div>\n        <b>Contacts:</b>\n      </div>\n      <div className={style.contacts}>\n        {arr.map(el => (\n          <div key={el}>\n            <b>{el}:</b> {profile.contacts[el]}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ProfileDataInfoForm_item__cs9sV\",\"error\":\"ProfileDataInfoForm_error__8Fd8x\"};","import { FC, ReactElement } from 'react';\n\nimport { useFormik } from 'formik';\n\nimport style from './ProfileDataInfoForm.module.css';\n\nimport { ContactsType, ProfileDataType, ProfileType } from 'redux/profile_reducer';\n\nexport const ProfileDataInfoForm: FC<ProfileDataInfoFormPropsType> = ({\n  initialState,\n  setProfileData,\n}): ReactElement => {\n  const formik = useFormik({\n    initialValues: initialState,\n    onSubmit: values => {\n      setProfileData(values);\n      formik.resetForm();\n    },\n  });\n\n  const arr = Object.keys(initialState.contacts) as Array<keyof ContactsType>;\n\n  return (\n    // const maxLength = useCallback(maxLengthCreator(MaxLengthSymbols.profileForm), []);\n\n    <form onSubmit={formik.handleSubmit}>\n      <div>\n        <div>\n          <b>lookingForAJob:</b>\n          <input\n            id=\"lookingForAJob\"\n            name=\"lookingForAJob\"\n            type=\"checkbox\"\n            placeholder=\"some text\"\n            onChange={formik.handleChange}\n            defaultChecked={formik.values.lookingForAJob}\n          />\n        </div>\n        <div>\n          <b>lookingForAJobDescription:</b>\n          <input\n            id=\"lookingForAJobDescription\"\n            name=\"lookingForAJobDescription\"\n            type=\"lookingForAJobDescription\"\n            placeholder=\"some text\"\n            onChange={formik.handleChange}\n            value={formik.values.lookingForAJobDescription}\n          />\n        </div>\n        <div>\n          <b>fullName:</b>\n          <input\n            id=\"fullName\"\n            name=\"fullName\"\n            type=\"fullName\"\n            placeholder=\"some text\"\n            onChange={formik.handleChange}\n            value={formik.values.fullName}\n          />\n        </div>\n        <div>\n          <b>about me:</b>\n          <input\n            id=\"aboutMe\"\n            name=\"aboutMe\"\n            type=\"aboutMe\"\n            placeholder=\"some text\"\n            onChange={formik.handleChange}\n            value={formik.values.aboutMe}\n          />\n        </div>\n      </div>\n      <b>Contacts:</b>\n      <div>\n        {arr.map(el => (\n          <div className={style.item} key={el}>\n            <b>{el}:</b>\n            <input\n              id={el.toString()}\n              name={el.toString()}\n              type={el.toString()}\n              placeholder=\"some text\"\n              onChange={formik.handleChange}\n              defaultValue={formik.values.contacts[el]}\n              value={formik.values.contacts[el]}\n            />\n          </div>\n        ))}\n      </div>\n      <button type=\"submit\">add</button>\n    </form>\n  );\n};\ntype ProfileDataInfoFormPropsType = {\n  initialState: ProfileType;\n  setProfileData: (props: ProfileDataType) => void;\n};\n","import { ChangeEvent, memo, useEffect, useState } from 'react';\n\ntype ProfileStatusPT = {\n  status: string;\n  updateUserStatus: (status: string) => void;\n};\n\nexport const ProfileStatusWithHooks = memo((props: ProfileStatusPT) => {\n  const [editMod, setEditMod] = useState<boolean>(false);\n  const [statusText, setStatusText] = useState<string>(props.status);\n\n  useEffect(() => {\n    setStatusText(props.status);\n  }, [props.status]);\n\n  const setEditModTrue = (): void => {\n    setEditMod(true);\n  };\n\n  const setEditModFalse = (): void => {\n    setEditMod(false);\n    if (statusText) {\n      props.updateUserStatus(statusText);\n    }\n  };\n  const changeTextHandle = (e: ChangeEvent<HTMLInputElement>): void => {\n    setStatusText(e.currentTarget.value);\n  };\n\n  if (editMod) {\n    return (\n      <div>\n        <input\n          onBlur={setEditModFalse}\n          type=\"text\"\n          onChange={changeTextHandle}\n          value={statusText}\n        />\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h2 onDoubleClick={setEditModTrue}>{props.status}</h2>\n    </div>\n  );\n});\n","import { ChangeEvent, FC, ReactElement, useState } from 'react';\n\nimport { Preloader } from '../../../comonComponents/Preloader';\nimport stockAva from '../../../Users/imgAva/user.png';\nimport { ContentHeaderPT } from '../../Profile';\n\nimport style from './Content_header.module.css';\n\nimport { Button } from 'components/comonComponents/Button/Button';\nimport { AvatarImage } from 'components/Profile/Content/Content_header/AvatarImage';\nimport { ProfileDataInfo } from 'components/Profile/Content/Content_header/ProfileDataInfo';\nimport { ProfileDataInfoForm } from 'components/Profile/Content/Content_header/ProfileDataInfoForm';\nimport { ProfileStatusWithHooks } from 'components/Profile/ProfileStatus/ProfileStatusWithHooks';\nimport { ProfileDataType } from 'redux/profile_reducer';\nimport { CommonConstants } from 'utils/enum/enum';\n\nexport const ContentHeader: FC<ContentHeaderPT> = ({\n  profile,\n  updateUserStatus,\n  status,\n  userId,\n  savePhoto,\n  setProfileData,\n}): ReactElement => {\n  const [editMod, setEditMod] = useState<boolean>(false);\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>): void => {\n    if (e.target.files) {\n      savePhoto(e.target.files[CommonConstants.zero]);\n    }\n  };\n\n  const setEditModHandle = (): void => {\n    setEditMod(!editMod);\n  };\n\n  const setProfileDataCB = (props: ProfileDataType): void => {\n    setProfileData(props, `${profile.userId}`, setEditMod);\n    console.log(props);\n  };\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className={style.content}>\n      <div className={style.item}>\n        <span>Title</span>\n        <div>\n          <img alt=\"ava\" src={profile.photos.large || stockAva} />\n        </div>\n        <AvatarImage userId={userId} onChangeHandler={onMainPhotoSelected} />\n        <div>\n          <span>Status:</span>\n        </div>\n        <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus} />\n        {!userId && <Button title=\" change editMod\" onClickHandler={setEditModHandle} />}\n        {editMod ? (\n          <ProfileDataInfoForm initialState={profile} setProfileData={setProfileDataCB} />\n        ) : (\n          <ProfileDataInfo profile={profile} />\n        )}\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Old_Post_content__zQli1\",\"contentButtons\":\"Old_Post_contentButtons__x5wdf\",\"avatar\":\"Old_Post_avatar__bRRsf\",\"items\":\"Old_Post_items__PFs6N\",\"item\":\"Old_Post_item__vleAE\"};","import React, { memo } from 'react';\n\nimport style from './Old_Post.module.css';\n\ntype OldPostPT = {\n  id: string;\n  message: string;\n  like: number;\n  comment: number;\n  addLike: (postID: string) => void;\n};\n\nexport const OldPost = memo(({ message, like, comment, addLike, id }: OldPostPT) => {\n  const addLikeHandle = (): void => addLike(id);\n\n  return (\n    <div className={style.content}>\n      <div className={style.items}>\n        <img\n          alt=\"@\"\n          className={style.avatar}\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQd1UqsPpKa_ipIT3XjQpWpH5mm6ZiBlEpvzw&usqp=CAU\"\n        />\n        <span className={style.item}>{message}</span>\n      </div>\n      <div className={style.contentButtons}>\n        <button type=\"button\" onClick={addLikeHandle}>\n          Like\n        </button>\n        <span>{like}</span>\n        <button type=\"button\">Comment</button>\n        <span>{comment}</span>\n      </div>\n    </div>\n  );\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Posts_item__XdCp7\",\"content\":\"Posts_content__DVKi4\"};","import { ReactElement } from 'react';\n\nimport { useFormik } from 'formik';\n\nexport type PostsReduxFormType = {\n  textPost: string;\n};\n\ntype addNewPostHandleType = {\n  addNewPostHandle: (data: PostsReduxFormType) => void;\n};\n\nexport const PostForm = ({ addNewPostHandle }: addNewPostHandleType): ReactElement => {\n  // const maxLength15 = useCallback(maxLengthCreator(MaxLengthSymbols.postForm), []);\n\n  const formik = useFormik({\n    initialValues: {\n      textPost: '',\n    },\n    onSubmit: values => {\n      addNewPostHandle(values);\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <div>\n        <input\n          id=\"textPost\"\n          name=\"textPost\"\n          type=\"textPost\"\n          placeholder=\"some text\"\n          onChange={formik.handleChange}\n          value={formik.values.textPost}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">Add post</button>\n      </div>\n    </form>\n  );\n};\n","import React, { memo, useCallback } from 'react';\n\nimport { OldPost } from './Old_post/OldPost';\nimport style from './Posts.module.css';\nimport { PostForm, PostsReduxFormType } from './PostsForm/PostsForm';\n\nimport { initialStateProfileType } from 'redux/profile_reducer';\n\nexport type NewPostPT = {\n  profilePage: initialStateProfileType;\n  addPostAC: (value: { value: string }) => void;\n  addLikeAC: (value: { postID: string }) => void;\n};\n\nexport const Posts = memo(({ profilePage, addPostAC, addLikeAC }: NewPostPT) => {\n  const addNewItem = (data: PostsReduxFormType): void => {\n    console.log(data);\n    if (data.textPost) {\n      addPostAC({ value: data.textPost.trim() });\n    } else {\n      console.warn('field is empty');\n    }\n  };\n\n  const addLikeHandle = useCallback((postID: string) => {\n    addLikeAC({ postID });\n  }, []);\n\n  return (\n    <div className={style.content}>\n      <div className={style.item}>\n        New Post\n        {/* when submit form — call addNewItem  */}\n        <PostForm addNewPostHandle={addNewItem} />\n        {profilePage.postData.map(item => (\n          <OldPost\n            key={item.id}\n            id={item.id}\n            addLike={addLikeHandle}\n            message={item.message}\n            like={item.like}\n            comment={item.comment}\n          />\n        ))}\n      </div>\n    </div>\n  );\n});\n","import { connect } from 'react-redux';\n\nimport { Posts } from './Posts';\n\nimport { addLikeAC, addPostAC, initialStateProfileType } from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\n\nexport type profilePagePT = {\n  profilePage: initialStateProfileType;\n};\n\nconst mapStateToProps = (state: AppStatePT): profilePagePT => ({\n  profilePage: state.profilePage,\n});\n\nconst obj = { addPostAC, addLikeAC };\n\nexport const PostsContainer = connect(mapStateToProps, obj)(Posts);\n","import React, { memo } from 'react';\n\nimport { ContentHeader } from './Content/Content_header/ContentHeader';\nimport { PostsContainer } from './Content/Posts/PostsContainer';\n\nimport { ProfileDataType, ProfileType } from 'redux/profile_reducer';\n\nexport type ContentHeaderPT = {\n  userId: string;\n  savePhoto: (file: File) => void;\n  profile: ProfileType;\n  status: string;\n  updateUserStatus: (status: string) => void;\n  setProfileData: (\n    data: ProfileDataType,\n    userId: string,\n    setEditMod: (value: boolean) => void,\n  ) => void;\n};\n\nexport const Profile = memo((props: ContentHeaderPT) => (\n  <div>\n    <ContentHeader\n      profile={props.profile}\n      savePhoto={props.savePhoto}\n      userId={props.userId}\n      status={props.status}\n      setProfileData={props.setProfileData}\n      updateUserStatus={props.updateUserStatus}\n    />\n    <PostsContainer />\n  </div>\n));\n","import { Component, ComponentType, ReactElement } from 'react';\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { Profile } from './Profile';\n\nimport { withAuthRedirect } from 'hoc/withAuthRedirect';\nimport {\n  ProfileDataType,\n  ProfileType,\n  putPhotoTC,\n  setProfileDataTC,\n  setUserStatusTC,\n  setUserTC,\n  updateUserStatusTC,\n} from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\nimport {\n  selectAuthorisedUserID,\n  selectProfilePage,\n  selectProfilePageStatus,\n} from 'utils/selectors/selectors';\nimport { withRouter } from 'utils/withRouter/WithRouter';\n\ntype PathParamPT = {\n  userId: string;\n};\n\nexport class ProfileContainerAPI extends Component<\n  mapStateToPropsPT & mapDispatchToPropsType & { params: PathParamPT }\n> {\n  componentDidMount(): void {\n    const { setUserStatus, setUser, authorisedUserID, params } = this.props;\n\n    let userID = params.userId;\n    if (!userID) {\n      userID = authorisedUserID;\n    }\n    setUser(userID);\n    setUserStatus(userID);\n  }\n\n  render(): ReactElement {\n    const { profile, setProfileData, updateUserStatus, status, params, setPhoto } =\n      this.props;\n\n    return (\n      <Profile\n        userId={params.userId}\n        profile={profile}\n        status={status}\n        savePhoto={setPhoto}\n        setProfileData={setProfileData}\n        updateUserStatus={updateUserStatus}\n      />\n    );\n  }\n}\n\ntype mapStateToPropsPT = {\n  profile: ProfileType;\n  status: string;\n  authorisedUserID: string;\n};\n\nconst mapStateToProps = (state: AppStatePT): mapStateToPropsPT => ({\n  profile: selectProfilePage(state),\n  status: selectProfilePageStatus(state),\n  authorisedUserID: selectAuthorisedUserID(state),\n});\n\ntype mapDispatchToPropsType = {\n  setUser: (useId: string) => void;\n  setUserStatus: (status: string) => void;\n  updateUserStatus: (status: string) => void;\n  setPhoto: (file: File) => void;\n  setProfileData: (\n    data: ProfileDataType,\n    userId: string,\n    setEditMod: (value: boolean) => void,\n  ) => void;\n};\nconst mapDispatchToProps: mapDispatchToPropsType = {\n  setUser: setUserTC,\n  setUserStatus: setUserStatusTC,\n  updateUserStatus: updateUserStatusTC,\n  setPhoto: putPhotoTC,\n  setProfileData: setProfileDataTC,\n};\n\nconst ProfileContainer = compose<ComponentType>(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps),\n  withRouter,\n)(ProfileContainerAPI);\n\nexport default ProfileContainer;\n","import { Component } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nexport const withRouter = (WrappedComponent: typeof Component) => (props: object) => {\n  const params = useParams(); // useParams возвращает объект пары key/value (ключ/значение) параметров URL.\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <WrappedComponent {...props} params={params} />;\n};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { ComponentType, ReactElement } from 'react';\n\nimport {\n  connect,\n  ConnectedComponent,\n  DispatchProp,\n  DistributiveOmit,\n  GetLibraryManagedProps,\n  Shared,\n} from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AppStatePT } from 'redux/store_redux';\n\ntype MapStatePT = {\n  isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppStatePT): MapStatePT => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport function withAuthRedirect<T>(\n  Component: ComponentType<T>,\n): ConnectedComponent<\n  (props: MapStatePT) => ReactElement,\n  DistributiveOmit<\n    GetLibraryManagedProps<(props: MapStatePT) => ReactElement>,\n    keyof Shared<\n      MapStatePT & DispatchProp,\n      GetLibraryManagedProps<(props: MapStatePT) => ReactElement>\n    >\n  >\n> {\n  //  <T> не работает со стрелочными функциями\n\n  const RedirectComponent = (props: MapStatePT): ReactElement => {\n    const { isAuth, ...restProps } = props; // Достаём isAuth, т.к. нам не нужно его передавать в компоненту\n\n    if (!isAuth) {\n      return <Navigate to=\"/login\" />;\n    }\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    return <Component {...(restProps as T)} />; // Все что мы закинем сюда, добавит новые ключи в конечной компоненте\n  };\n\n  // let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n  return connect(mapStateToProps)(RedirectComponent);\n}\n","import { createSelector } from 'reselect';\n\nimport { dialogsItemsPT } from 'components/Messages/MessagesContainer';\nimport { UsersStatePT } from 'components/Users/UsersContainer';\nimport { ProfileType } from 'redux/profile_reducer';\nimport { AppStatePT } from 'redux/store_redux';\n\nexport const selectUsers = (state: AppStatePT): UsersStatePT => state.users; // примитивный селектор\n\nexport const selectUsersSuper = createSelector(\n  selectUsers,\n  users =>\n    // помимо selectUsers могут быть и другие селекторы и результат будет закинут как аргумент в фн.\n    users, // здесь может быть сложная фильтрация\n);\n\nexport const selectProfilePage = (state: AppStatePT): ProfileType =>\n  state.profilePage.profile;\nexport const selectProfilePageStatus = (state: AppStatePT): string =>\n  state.profilePage.status;\nexport const selectAuthorisedUserID = (state: AppStatePT): string =>\n  state.auth.data.id.toString();\nexport const selectDialogsPage = (state: AppStatePT): dialogsItemsPT => state.dialogsPage;\n// export const selectAuth = (state: AppStatePT): boolean => state.auth.isAuth;\nexport const selectIsAuth = (state: AppStatePT): { isAuth: boolean } => ({\n  isAuth: state.auth.isAuth,\n});\nexport const selectCaptcha = (state: AppStatePT): { captchaURL: string } => ({\n  captchaURL: state.auth.captchaURL,\n});\n"],"names":["AvatarImage","userId","onChangeHandler","type","onChange","ProfileDataInfo","profile","arr","Object","keys","contacts","lookingForAJob","lookingForAJobDescription","fullName","aboutMe","className","style","map","el","ProfileDataInfoForm","initialState","setProfileData","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","id","name","placeholder","handleChange","defaultChecked","value","toString","defaultValue","ProfileStatusWithHooks","memo","props","useState","editMod","setEditMod","status","statusText","setStatusText","useEffect","onBlur","updateUserStatus","e","currentTarget","onDoubleClick","ContentHeader","savePhoto","alt","src","photos","large","stockAva","target","files","CommonConstants","Button","title","onClickHandler","console","log","Preloader","OldPost","message","like","comment","addLike","onClick","PostForm","addNewPostHandle","textPost","Posts","profilePage","addPostAC","addLikeAC","addLikeHandle","useCallback","postID","data","trim","warn","postData","item","obj","PostsContainer","connect","state","Profile","ProfileContainerAPI","this","setUserStatus","setUser","authorisedUserID","userID","params","setPhoto","Component","mapDispatchToProps","setUserTC","setUserStatusTC","updateUserStatusTC","putPhotoTC","setProfileDataTC","compose","withAuthRedirect","selectProfilePage","selectProfilePageStatus","selectAuthorisedUserID","WrappedComponent","useParams","_objectWithoutProperties","source","excluded","key","i","sourceKeys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps","isAuth","auth","restProps","to","selectUsersSuper","createSelector","users","selectDialogsPage","dialogsPage","selectIsAuth","selectCaptcha","captchaURL"],"sourceRoot":""}