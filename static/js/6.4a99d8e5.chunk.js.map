{"version":3,"sources":["components/comonComponents/FormsControls/FormsControl.tsx","utils/validators/validators.ts","utils/selectors/selectors.tsx","components/comonComponents/FormsControls/FormsControl.module.css","components/Login/LoginForm/LoginForm.module.css","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx"],"names":["TextArea","memo","props","showError","meta","touched","error","className","style","formControl","placeholder","input","Input","type","requiredField","value","maxLengthCreator","max","length","console","dir","selectUsersSuper","createSelector","state","users","selectProfilePage","profilePage","profile","selectProfilePageStatus","status","selectAuthorisedUserID","auth","data","id","toString","selectDialogsPage","dialogsPage","selectAuth","isAuth","selectIsAuth","selectCaptcha","captchaURL","module","exports","LoginReduxForm","maxLength","useCallback","onSubmit","handleSubmit","Field","name","component","validate","errorMessage","alt","src","LoginForm","reduxForm","form","LoginContainer","formData","setLoginThunkCreator","this","to","Component","mapDispatchToProps","Login","connect"],"mappings":"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","file":"static/js/6.4a99d8e5.chunk.js","sourcesContent":["import { WrappedFieldProps } from 'redux-form';\r\nimport style from './FormsControl.module.css';\r\nimport { memo } from 'react';\r\n\r\ninterface TextAreaType extends WrappedFieldProps {\r\n  placeholder: string;\r\n  type: string;\r\n} // другая запись для разнообразия\r\n\r\nexport const TextArea = memo((props: TextAreaType) => {\r\n\r\n  const showError = props.meta.touched && props.meta.error;\r\n\r\n  return (\r\n    <div className={`${style.formControl} ${showError ? style.error : ''}`}>\r\n      <textarea placeholder={props.placeholder} {...props.input} />\r\n      {showError && <div><span>{props.meta.error}</span></div>}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport const Input = memo((props: TextAreaType) => {\r\n\r\n  const showError = props.meta.touched && props.meta.error;\r\n\r\n  return (\r\n    <div className={`${style.formControl} ${showError ? style.error : ''}`}>\r\n      <input placeholder={props.placeholder} {...props.input} type={props.type} />\r\n      {showError && <div><span>{props.meta.error}</span></div>}\r\n    </div>\r\n  );\r\n});\r\n","export const requiredField = (value: string) => {\r\n  if (!!value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (max: number) => (value: string) => {\r\n  if (value && value.length > max) {\r\n    console.dir('maxLength15');\r\n    return `Must be ${max} characters or less`;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n","import { AppStatePT } from 'redux/store_redux';\r\nimport { createSelector } from 'reselect';\r\nimport { UsersStatePT } from 'components/Users/UsersContainer';\r\n\r\nexport const selectUsers = (state: AppStatePT): UsersStatePT => {\r\n  return state.users; // примитивный селектор\r\n};\r\n\r\nexport const selectUsersSuper = createSelector(selectUsers, (users) => {\r\n  // помимо selectUsers могут быть и другие селекторы и результат будет закинут как аргумент в фн.\r\n  return users; // здесь может быть сложная фильтрация\r\n});\r\n\r\nexport const selectProfilePage = (state: AppStatePT) => state.profilePage.profile;\r\nexport const selectProfilePageStatus = (state: AppStatePT) => state.profilePage.status;\r\nexport const selectAuthorisedUserID = (state: AppStatePT) => state.auth.data.id.toString();\r\nexport const selectDialogsPage = (state: AppStatePT) => state.dialogsPage;\r\nexport const selectAuth = (state: AppStatePT) => state.auth.isAuth;\r\nexport const selectIsAuth = (state: AppStatePT) => ({ isAuth: state.auth.isAuth });\r\nexport const selectCaptcha = (state: AppStatePT) => ({ captchaURL: state.auth.captchaURL });","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__3Ad_n\",\"error\":\"FormsControl_error__33xeL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"LoginForm_errorMessage__3zs6u\"};","import { memo, useCallback } from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Input } from 'components/comonComponents/FormsControls/FormsControl';\r\nimport { maxLengthCreator, requiredField } from 'utils/validators/validators';\r\nimport style from './LoginForm.module.css';\r\n\r\nexport type FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captchaURL: string\r\n}\r\n\r\nexport type LoginPropsType = {\r\n  captchaURL: string\r\n}\r\n\r\n// <form onSubmit={props.handleSubmit}>  метод из redux form,\r\n// который собирает данные из Fields\r\n\r\nconst LoginReduxForm = memo((props: InjectedFormProps<FormDataType, LoginPropsType> & LoginPropsType) => {\r\n\r\n  let maxLength = useCallback(maxLengthCreator(30), []);\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field type='text'\r\n               name={'email'}\r\n               placeholder={'login'}\r\n               component={Input}\r\n               validate={[requiredField, maxLength]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field type='password'\r\n               name={'password'}\r\n               placeholder={'password'}\r\n               component={Input}\r\n               validate={[requiredField, maxLength]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field type={'checkbox'}\r\n               name={'remember me'}\r\n               component={'input'} /> remember me\r\n      </div>\r\n      <div className={style.errorMessage}>\r\n        {props.error} {/* попадает сюда если сработал stopSubmit AC*/}\r\n      </div>\r\n      <div>\r\n        {props.captchaURL && <div>\r\n          <img alt={'captcha'} src={props.captchaURL} />\r\n          <div>Captcha:</div>\r\n          <div><Field type={'input'}\r\n                      name={'captcha'}\r\n                      component={'input'} /></div>\r\n        </div>}\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport const LoginForm = reduxForm<FormDataType, LoginPropsType>({ form: 'LOGIN' })(LoginReduxForm);","import { FormDataType, LoginForm } from './LoginForm/LoginForm';\r\nimport { connect } from 'react-redux';\r\nimport { setLoginThunkCreator } from 'redux/auth_reducer';\r\nimport { loginAPIRequestType } from 'api/api';\r\nimport { AppStatePT } from 'redux/store_redux';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { selectCaptcha, selectIsAuth } from 'utils/selectors/selectors';\r\nimport { Component } from 'react';\r\n\r\nclass LoginContainer extends Component<mapStateToPropsType & mapDispatchToPropsType> {\r\n\r\n  onSubmit = (formData: FormDataType) => {\r\n    this.props.setLoginThunkCreator(formData);\r\n\r\n  };\r\n\r\n  render() {\r\n\r\n    if (this.props.isAuth) return <Navigate to={'/profile'} />;\r\n    return (\r\n      <>\r\n        <div>\r\n          LOGIN\r\n        </div>\r\n        <div>Email: free@samuraijs.com</div>\r\n        <div>Password: free</div>\r\n        <LoginForm onSubmit={this.onSubmit} captchaURL={this.props.captchaURL} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// <LoginForm onSubmit={onSubmit}/> так это контейнерная компонента, то в onSubmit автоматом попадают пропсы\r\n\r\ntype mapStateToPropsType = { isAuth: boolean, captchaURL: string }\r\n\r\nconst mapStateToProps = (state: AppStatePT): mapStateToPropsType => {\r\n  return { ...selectIsAuth(state), ...selectCaptcha(state) };\r\n};\r\n\r\ntype mapDispatchToPropsType = {\r\n  setLoginThunkCreator: (userData: loginAPIRequestType) => void\r\n}\r\n\r\nconst mapDispatchToProps: mapDispatchToPropsType = {\r\n  setLoginThunkCreator: setLoginThunkCreator,\r\n};\r\n\r\nconst Login = connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\r\n\r\nexport default Login;"],"sourceRoot":""}